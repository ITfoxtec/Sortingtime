// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sortingtime.Models;
using System;

namespace Sortingtime.SqlMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sortingtime.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Sortingtime.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("DefaultGroups");
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("MaterialId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("DefaultMaterials");
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("TaskId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("DefaultTasks");
                });

            modelBuilder.Entity("Sortingtime.Models.Demo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RemoteIpAddress")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("Demos");
                });

            modelBuilder.Entity("Sortingtime.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("PartitionId");

                    b.HasKey("Id");

                    b.HasIndex("PartitionId", "Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Sortingtime.Models.HourPriceSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupReferenceKey")
                        .HasMaxLength(200);

                    b.Property<decimal>("HourPrice");

                    b.Property<long>("PartitionId");

                    b.Property<string>("TaskReferenceKey")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("Timestamp");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PartitionId", "UserId", "GroupReferenceKey", "TaskReferenceKey");

                    b.ToTable("HourPriceSettings");
                });

            modelBuilder.Entity("Sortingtime.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerShort");

                    b.Property<string>("EmailBody")
                        .HasMaxLength(4000);

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(400);

                    b.Property<string>("FromEmail")
                        .HasMaxLength(200);

                    b.Property<string>("FromFullName")
                        .HasMaxLength(200);

                    b.Property<string>("InvoiceData");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date");

                    b.Property<long>("Number");

                    b.Property<long>("PartitionId");

                    b.Property<int>("Status");

                    b.Property<decimal>("SubTotalPrice");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(400);

                    b.Property<DateTime>("UpdateTimestamp");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PartitionId", "Status", "InvoiceDate");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Sortingtime.Models.InvoiceSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailBody")
                        .HasMaxLength(4000);

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(400);

                    b.Property<string>("InvoiceCustomer")
                        .HasMaxLength(400);

                    b.Property<string>("InvoicePaymentTerms")
                        .HasMaxLength(400);

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(100);

                    b.Property<string>("InvoiceText")
                        .HasMaxLength(4000);

                    b.Property<string>("InvoiceTitle")
                        .HasMaxLength(200);

                    b.Property<long>("PartitionId");

                    b.Property<string>("ReferenceKey")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ReferenceType");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("PartitionId", "ReferenceType", "ReferenceKey");

                    b.ToTable("InvoiceSettings");
                });

            modelBuilder.Entity("Sortingtime.Models.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogSource")
                        .HasMaxLength(200);

                    b.Property<string>("Message");

                    b.Property<int>("Severity");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Sortingtime.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GroupId", "Name");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Sortingtime.Models.MaterialItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<long>("MaterialId");

                    b.Property<int>("Quantity");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("MaterialItems");
                });

            modelBuilder.Entity("Sortingtime.Models.Organization", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(400);

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("FirstInvoiceNumber");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("PaymentDetails")
                        .HasMaxLength(400);

                    b.Property<int?>("TaxPercentage");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("VatPercentage");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Sortingtime.Models.Partition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedByUserId");

                    b.Property<short>("MaxInvoicesPerMonth");

                    b.Property<short>("MaxReportsPerMonth");

                    b.Property<short>("MaxUsers");

                    b.Property<int>("Plan");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("Partitions");
                });

            modelBuilder.Entity("Sortingtime.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailBody")
                        .HasMaxLength(4000);

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(400);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("Date");

                    b.Property<string>("FromEmail")
                        .HasMaxLength(200);

                    b.Property<string>("FromFullName")
                        .HasMaxLength(200);

                    b.Property<long>("Number");

                    b.Property<long>("PartitionId");

                    b.Property<string>("ReportData");

                    b.Property<int>("Status");

                    b.Property<DateTime>("Timestamp");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("Date");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(400);

                    b.Property<int>("TotalTime");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PartitionId", "Status", "FromDate", "ToDate");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Sortingtime.Models.ReportSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailBody")
                        .HasMaxLength(4000);

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(400);

                    b.Property<long>("PartitionId");

                    b.Property<string>("ReferenceKey")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ReferenceType");

                    b.Property<string>("ReportText")
                        .HasMaxLength(4000);

                    b.Property<string>("ReportTitle")
                        .HasMaxLength(200);

                    b.Property<string>("ToEmail")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("PartitionId", "ReferenceType", "ReferenceKey");

                    b.ToTable("ReportSettings");
                });

            modelBuilder.Entity("Sortingtime.Models.Ttask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("GroupId", "Name");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Sortingtime.Models.TtaskItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<long>("TaskId");

                    b.Property<short>("Time");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Sortingtime.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Sortingtime.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Sortingtime.Models.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Sortingtime.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Sortingtime.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultGroup", b =>
                {
                    b.HasOne("Sortingtime.Models.Group", "Group")
                        .WithMany("Defaults")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultMaterial", b =>
                {
                    b.HasOne("Sortingtime.Models.Material", "Material")
                        .WithMany("Defaults")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.DefaultTask", b =>
                {
                    b.HasOne("Sortingtime.Models.Ttask", "Task")
                        .WithMany("Defaults")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Group", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("Groups")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.HourPriceSetting", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("HourPriceSettings")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Invoice", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("Invoices")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.InvoiceSetting", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("InvoiceSettings")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Material", b =>
                {
                    b.HasOne("Sortingtime.Models.Group", "Group")
                        .WithMany("Materials")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.MaterialItem", b =>
                {
                    b.HasOne("Sortingtime.Models.Material", "Material")
                        .WithMany("Items")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany("MaterialItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Organization", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithOne("Organization")
                        .HasForeignKey("Sortingtime.Models.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Report", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("Reports")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.ReportSetting", b =>
                {
                    b.HasOne("Sortingtime.Models.Partition", "Partition")
                        .WithMany("ReportSettings")
                        .HasForeignKey("PartitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.Ttask", b =>
                {
                    b.HasOne("Sortingtime.Models.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sortingtime.Models.TtaskItem", b =>
                {
                    b.HasOne("Sortingtime.Models.Ttask", "Task")
                        .WithMany("Items")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sortingtime.Models.ApplicationUser", "User")
                        .WithMany("TaskItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
